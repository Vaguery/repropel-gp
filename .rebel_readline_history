1562031800765:(reset-autobuild)
1562067778178:(count @population-atom)
1562077249546:(reset-autobuild)
1562267617630:(sort-by key {:a 12 :c 3 :b 9})
1562267637076:(sort-by key {:a [12] :c [3] :b [9]\n              })
1562413312205:(into {} [[7 3] [3 9]])
1562413352166:(into (sorted-map) [{:x 3 :y 1} {:x 9 :y 3}])
1562434904300:(require '[cljs.core.async :refer [chan put! take!]])
1562434910099:(enable-console-print!)
1562434917578:(def ch (chan))
1562434922768:(take! ch #(println "Got a value:" %))
1562434928770:(put! ch 42)
1562450501641:(conj '(1 2 3) '(\n                 4 5 6))
1562450511373:(concat '(1 2 3) '(4 5 6))
1562450528281:(concat '(4 5 6) '(1 2\n                     ))
1562451168194:(seq? (list 6 6))
1562451174792:(list 6 6)
1562503200581:(defn div7?\n  [x]\n  (loop [x argument]\n    (if (some #{x} [-7 7])\n      x\n      (recur \n        (let [shorter (dec (length x))]\n          (- \n            (take shorter x) \n            (* 2 (drop shorter x))\n            ))))))
1562503308211:(defn numtake [n i] (Integer/parseInt (take i (str n))))
1562503348309:(defn numtake [n i] (Integer.\n                     (take i (str n))))
1562503389049:(defn numtake [n i] (read-string (take i (str n))))
1562503425352:(defn numtake [n i] (clojure.core/\n                      read-string (take i (str n))))
